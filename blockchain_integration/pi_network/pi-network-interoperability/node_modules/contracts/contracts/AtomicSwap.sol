pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol";

contract AtomicSwap {
    address public owner;
    mapping(address => uint256) public balances;
    mapping(uint256 => address) public swapIds;

    constructor() public {
        owner = msg.sender;
    }

    function executeSwap(uint256 swapId, address senderAddress, address recipientAddress, uint256 amount) public {
        require(msg.sender == owner, "Only the owner can execute swaps");
        require(swapIds[swapId] == senderAddress, "Invalid swap ID");
        SafeERC20.safeTransfer(senderAddress, recipientAddress, amount);
        balances[senderAddress] -= amount;
        balances[recipientAddress] += amount;
    }

    function getBalance(address address) public view returns (uint256) {
        return balances[address];
    }
}
