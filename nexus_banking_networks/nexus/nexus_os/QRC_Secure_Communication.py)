import numpy as np
from qiskit import QuantumCircuit, execute

class QRCSecureCommunication:
    def __init__(self, key_size):
        self.key_size = key_size
        self.qc = QuantumCircuit(5)

    def generate_key(self):
        self.qc.h(range(5))
        self.qc.measure_all()
        result = execute(self.qc, backend='qasm_simulator').result()
        key = [self.key_size[i] for i, bit in enumerate(result.get_counts()) if bit == 1]
        return key

    def encrypt_data(self, data, key):
        encrypted_data = np.bitwise_xor(data, key)
        return encrypted_data

    def decrypt_data(self, encrypted_data, key):
        decrypted_data = np.bitwise_xor(encrypted_data, key)
        return decrypted_data

# Example usage:
qrc_secure_communication = QRCSecureCommunication(256)
key = qrc_secure_communication.generate_key()
data = 'Hello, Nexus OS!'
encrypted_data = qrc_secure_communication.encrypt_data(data, key)
print(f'Encrypted data: {encrypted_data}')

decrypted_data = qrc_secure_communication.decrypt_data(encrypted_data, key)
print(f'Decrypted data: {decrypted_data}')
